#!/bin/sh

# Displays today's snow chance (🏂), precipication chance (☔), humidity (💧), wind speed (🎐), and current (feel like) temperature (🌞).
# Usually intended for the statusbar.

LOCATION=$(curl -s http://ip-api.com/json | jq -r '[.regionName, .countryCode] | join(",")')

url="${WTTRURL:-wttr.in}"
weatherreport="${XDG_CACHE_HOME:-${HOME}/.cache}/weatherreport"
weatherreportjson="${XDG_CACHE_HOME:-${HOME}/.cache}/weatherreport.json"

error() {
  notify-send -u critical "⛔ Failed to update 'weather$1'"
  exit 1
}

# Get a weather report from 'wttr.in' and save it locally.
getweatherreport() {
  (timeout --signal=1 10s curl -sf "$url/$LOCATION" >"$weatherreport" &&
    printf "\nUpdated: %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" >>"$weatherreport") ||
    error "report"
}

getweatherreportjson() {
  timeout --signal=1 10s curl -sf "$url/$LOCATION?format=j1" >"$weatherreportjson" ||
    error "reportjson"
  grep -q 'Unknown' "$weatherreportjson" && error "reportjson"
}

# Forecast should be updated every 3 hours, but set 86400 to check once a day for reliability.
checkforecast() {
  [ -s "$1" ] && [ "$(($(date +%s) - $(stat -c %Y "$1")))" -le 86400 ]
}

get_current_hour() { date +%H | sed 's/^0*//'; }

get_nearest_hourly() {
  current_hour=$(get_current_hour)
  hour_index=$((current_hour / 3))
  jq ".weather[0].hourly[$hour_index]" "$weatherreportjson"
}

getprecip() { get_nearest_hourly | jq -r '.chanceofrain'; }

gethighprecip() { jq -r '.weather[0].hourly[].chanceofrain' "$weatherreportjson" | sort -rn | head -1; }

getsnow() { get_nearest_hourly | jq -r '.chanceofsnow'; }

getwind() { get_nearest_hourly | jq -r '.windspeedKmph'; }

gettemp() { get_nearest_hourly | jq -r '.tempC'; }

getfeelslike() { get_nearest_hourly | jq -r '.FeelsLikeC'; }

getlowtemp() { jq -r '.weather[0].hourly[].tempC' "$weatherreportjson" | sort -n | head -1; }

gethightemp() { jq -r '.weather[0].hourly[].tempC' "$weatherreportjson" | sort -rn | head -1; }

gethumidity() {
  humidity=$(get_nearest_hourly | jq -r '.humidity')
  case "$humidity" in
  [0-9] | [1-2][0-9]) echo "🏜️: $humidity%" ;;
  [3-4][0-9]) echo "🌲: $humidity%" ;;
  [5-6][0-9]) echo "💧: $humidity%" ;;
  [7-8][0-9]) echo "💦: $humidity%" ;;
  9[0-9] | 100) echo "🌊: $humidity%" ;;
  esac
}

getdesc() { get_nearest_hourly | jq -r '.weatherDesc[0].value' | sed 's/ $//'; }

showweather() {
  case "$(gettemp)" in
  -[0-9]* | 0) icon="🥶" ;;        # Temperature <= 0
  [1-9] | [1-2][0-9]) icon="🌞" ;; # Temperature 1–29
  3* | [4-9]*) icon="🥵" ;;        # Temperature >= 30
  esac
  [ -n "$(gettemp)" ] && echo "$icon$(gettemp)°"
}

todayweather() {
  printf "🌈 Today's weather: %s\n🏂: %s%%\n☔: %s(%s)m⧸s\n%s\n🎐: %sm/s\n🌞: %s°(%s°)\n🥶: %s°\n🥵: %s°\n" \
    "$(getdesc)" "$(getsnow)" "$(getprecip)" "$(gethighprecip)" "$(gethumidity)" "$(getwind)" "$(gettemp)" "$(getfeelslike)" "$(getlowtemp)" "$(gethightemp)"
}

# Show a Doppler RADAR of a user's preferred location.

secs=600 # Download a new doppler radar if one hasn't been downloaded in $secs seconds.
radarloc="${XDG_CACHE_HOME:-${HOME}/.cache}/radar"
doppler="${XDG_CACHE_HOME:-${HOME}/.cache}/doppler.gif"

pickloc() {
  chosen="$(echo "US: CONUS: Continental United States
US: Northeast
US: Southeast
US: PacNorthWest
US: PacSouthWest
US: UpperMissVly
US: SouthMissVly
US: SouthPlains
US: NorthRockies
US: SouthRockies
US: Alaska
US: Carib
US: Hawaii
US: CentGrLakes
US: Conus-Large
US: KABR: Aberdeen, SD
US: KBIS: Bismarck, ND
US: KFTG: Denver/Boulder, CO
US: KDMX: Des Moines, IA
US: KDTX: Detroit, MI
US: KDDC: Dodge City, KS
US: KDLH: Duluth, MN
US: KCYS: Cheyenne, WY
US: KLOT: Chicago, IL
US: KGLD: Goodland, KS
US: KUEX: Hastings, NE
US: KGJX: Grand Junction, CO
US: KGRR: Grand Rapids, MI
US: KMVX: Fargo/Grand Forks, ND
US: KGRB: Green Bay, WI
US: KIND: Indianapolis, IN
US: KJKL: Jackson, KY
US: KARX: La Crosse, WI
US: KILX: Lincoln/Central Illinois, IL
US: KLVX: Louisville, KY
US: KMQT: Marquette
US: KMKX: Milwaukee, WI
US: KMPX: Minneapolis, MN
US: KAPX: Gaylord/Alpena, MI
US: KLNX: North Platte, NE
US: KIWX: N. Webster/Northern, IN
US: KOAX: Omaha, NE
US: KPAH: Paducah, KY
US: KEAX: Pleasant Hill, MO
US: KPUX: Pueblo, CO
US: KDVN: Quad Cities, IA
US: KUDX: Rapid City, SD
US: KRIW: Riverton, WY
US: KSGF: Springfield, MO
US: KLSX: St. LOUIS, MO
US: KFSD: Sioux Falls, SD
US: KTWX: Topeka, KS
US: KICT: Wichita, KS
US: KVWX: Paducah, KY
US: ICAO: Responsible Wfo
US: KLTX: WILMINGTON, NC
US: KCCX: State College/Central, PA
US: KLWX: Sterling, VA
US: KFCX: Blacksburg/Roanoke, VA
US: KRAX: Raleigh/Durham, NC
US: KGYX: Portland, ME
US: KDIX: Mt Holly/Philadelphia, PA
US: KPBZ: Pittsburgh, PA
US: KAKQ: Wakefield, VA
US: KMHX: Morehead City, NC
US: KGSP: Greer/Greenville/Sprtbg, SC
US: KILN: Wilmington/Cincinnati, OH
US: KCLE: Cleveland, OH
US: KCAE: Columbia, SC
US: KBGM: Binghamton, NY
US: KENX: Albany, NY
US: KBUF: Buffalo, NY
US: KCXX: Burlington, VT
US: KCBW: Caribou, ME
US: KBOX: Boston /Taunton, MA
US: KOKX: New York City, NY
US: KCLX: Charleston, SC
US: KRLX: Charleston, WV
US: ICAO: Responsible WFO
US: KBRO: Brownsville, TX
US: KABX: Albuquerque, NM
US: KAMA: Amarillo, TX
US: KFFC: Peachtree City/Atlanta, GA
US: KEWX: Austin/Sanantonio, TX
US: KBMX: Birmingham, AL
US: KCRP: Corpus Christi, TX
US: KFWS: Dallas / Ft. Worth, TX
US: KEPZ: El Paso, TX
US: KHGX: Houston/ Galveston, TX
US: KJAX: Jacksonville, FL
US: KBYX: Key West, FL
US: KMRX: Morristown/knoxville, TN
US: KLBB: Lubbock, TX
US: KLZK: Little Rock, AR
US: KLCH: Lake Charles, LA
US: KOHX: Nashville, TN
US: KMLB: Melbourne, FL
US: KNQA: Memphis, TN
US: KAMX: Miami, FL
US: KMAF: Midland/odessa, TX
US: KTLX: Norman, OK
US: KHTX: Huntsville, AL
US: KMOB: Mobile, AL
US: KTLH: Tallahassee, FL
US: KTBW: Tampa Bay Area, FL
US: KSJT: San Angelo, TX
US: KINX: Tulsa, OK
US: KSRX: Tulsa, OK
US: KLIX: New Orleans/slidell, LA
US: KDGX: Jackson, MS
US: KSHV: Shreveport, LA
US: ICAO: Responsible WFO
US: KLGX: Seattle / Tacoma, WA
US: KOTX: Spokane, WA
US: KEMX: Tucson, AZ
US: KYUX: Phoenix, AZ
US: KNKX: San Diego, CA
US: KMUX: Monterey/san Francisco, CA
US: KHNX: San Joaquin/hanford, CA
US: KSOX: San Diego, CA
US: KATX: Seattle / Tacoma, WA
US: KIWA: Phoenix, AZ
US: KRTX: Portland, OR
US: KSFX: Pocatello, ID
US: KRGX: Reno, NV
US: KDAX: Sacramento, CA
US: KMTX: Salt Lake City, UT
US: KPDT: Pendleton, OR
US: KMSX: Missoula, MT
US: KESX: Las Vegas, NV
US: KVTX: Los Angeles, CA
US: KMAX: Medford, OR
US: KFSX: Flagstaff, AZ
US: KGGW: Glasgow, MT
US: KLRX: Elko, NV
US: KBHX: Eureka, CA
US: KTFX: Great Falls, MT
US: KCBX: Boise, ID
US: KBLX: Billings, MT
US: KICX: Salt Lake City, UT
US: ICAO: Responsible Wfo W/ MSCF
US: PABC: Anchorage, AK
US: PAPD: Fairbanks, AK
US: PHKM: Honolulu, HI
US: PAHG: Anchorage, AK
US: PAKC: Anchorage, AK
US: PAIH: Anchorage, AK
US: PHMO: Honolulu, HI
US: PAEC: Fairbanks, AK
US: TJUA: San Juan, PR
US: PACG: Juneau, AK
US: PHKI: Honolulu, HI
US: PHWA: Honolulu, HI
US: ICAO: Responsible Wfo W/ MSCF
US: KFDR: Norman, OK
US: PGUA: Guam
US: KBBX: Sacramento, CA
US: KFDX: Albuquerque, NM
US: KGWX: Jackson, MS
US: KDOX: Wakefield, VA
US: KDYX: San Angelo, TX
US: KEYX: Las Vegas, NV
US: KEVX: Mobile, AL
US: KHPX: Paducah, KY
US: KTYX: Burlington, VT
US: KGRK: Dallas / Ft. Worth, TX
US: KPOE: Lake Charles, LA
US: KEOX: Tallahassee, FL
US: KHDX: El Paso, TX
US: KDFX: San Antonio, TX
US: KMXX: Birmingham, AL
US: KMBX: Bismarck, ND
US: KVAX: Jacksonville, FL
US: KJGX: Peachtree City/atlanta, GA
US: KVNX: Norman, OK
US: KVBX: Vandenberg Afb: Orcutt, CA
DE: BAW: Baden-Württemberg
DE: BAY: Bavaria
DE: BBB: Berlin
DE: BBB: Brandenburg
DE: HES: Hesse
DE: MVP: Mecklenburg-Western Pomerania
DE: NIB: Lower Saxony
DE: NIB: Bremen
DE: NRW: North Rhine-Westphalia
DE: RPS: Rhineland-Palatinate
DE: RPS: Saarland
DE: SAC: Saxony
DE: SAA: Saxony-Anhalt
DE: SHH: Schleswig-Holstein
DE: SHH: Hamburg
DE: THU: Thuringia
NL: The Netherlands" | dmenu -r -i -l 50 -p "Select a radar to use as default:")"

  # Ensure user did not escape.
  [ -z "$chosen" ] && exit 1

  # Set country code and radar code.
  countrycode=${chosen%%:*}
  radarcode=${chosen#* } radarcode=${radarcode%:*}

  # Print codes to $radarloc file.
  printf "%s,%s\\n" "$countrycode" "$radarcode" >"$radarloc"
}

getdoppler() {
  country=$(cut -c -2 "$radarloc")
  province=$(cut -c 4- "$radarloc")
  notify-send "🌦️ Doppler RADAR" "Pulling most recent Doppler RADAR for $province."
  case "$country" in
  "US")
    province="$(echo "$province" | tr "[:lower:]" "[:upper:]")"
    curl -sL "https://radar.weather.gov/ridge/standard/${province}_loop.gif" >"$doppler"
    ;;
  "DE")
    province="$(echo "$province" | tr "[:upper:]" "[:lower:]")"
    curl -sL "https://www.dwd.de/DWD/wetter/radar/radfilm_${province}_akt.gif" >"$doppler"
    ;;
  "NL") curl -sL "https://cdn.knmi.nl/knmi/map/general/weather-map.gif" >"$doppler" ;;
  esac
}

showdoppler() { setsid -f mpv --no-osc --loop=inf --no-terminal "$doppler"; }

case $BLOCK_BUTTON in
1)
  [ "$MANPAGER" = "less -s" ] && pager=true || pager=false
  [ "$pager" = "false" ] && {
    export MANPAGER='less -s'
    export LESS="R"
    export LESS_TERMCAP_mb="$(printf '%b' '[1;31m')"
    export LESS_TERMCAP_md="$(printf '%b' '[1;36m')"
    export LESS_TERMCAP_me="$(printf '%b' '[0m')"
    export LESS_TERMCAP_so="$(printf '%b' '[01;44;33m')"
    export LESS_TERMCAP_se="$(printf '%b' '[0m')"
    export LESS_TERMCAP_us="$(printf '%b' '[1;32m')"
    export LESS_TERMCAP_ue="$(printf '%b' '[0m')"
    export LESSOPEN="| /usr/bin/highlight -O ansi %s 2>/dev/null"
  }
  setsid -f "$TERMINAL" -e less -Sf "${XDG_CACHE_HOME:-${HOME}/.cache}/weatherreport"
  [ "$pager" = "false" ] && {
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    export MANROFFOPT="-c"
  }
  ;;
2)
  [ ! -f "$radarloc" ] && pickloc && getdoppler
  [ $(($(date '+%s') - $(stat -c %Y "$doppler"))) -gt "$secs" ] && getdoppler
  showdoppler
  ;;
3)
  notify-send "🌈 Weather module (updates every 3 hours)" "\- Left click for full forecast
- Shift + left click to update forecast
🏂: Chance of snow (hidden if it's 0)
☔: Chance of rain
💧: Humidity (icon changes depending on the level)
🎐: Wind speed
🌞: Current (feel like) temperature
🥶: Daily lowest temperature
🥵: Daily highest temperature"
  notify-send "$(todayweather)"
  notify-send "🗺️ Doppler RADAR module" "\- Middle click for local Doppler RADAR
- Shift + middle click to update RADAR location
After $secs seconds, new clicks will also automatically update the doppler RADAR"
  ;;
6) getweatherreport && getweatherreportjson && notify-send "🌈 Updated forecast" ;;
7) pickloc && getdoppler && showdoppler ;;
8) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

checkforecast "$weatherreport" || { getweatherreport && pkill -RTMIN+15 "${STATUSBAR:-dwmblocks}" && sleep 3; }
checkforecast "$weatherreportjson" || { getweatherreportjson && pkill -RTMIN+15 "${STATUSBAR:-dwmblocks}" && sleep 3; }
showweather
